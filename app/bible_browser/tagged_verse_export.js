/* This file is part of Ezra Project.

   Copyright (C) 2019 Tobias Klein <contact@ezra-project.net>

   Ezra Project is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   Ezra Project is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Ezra Project. See the file COPYING.
   If not, see <http://www.gnu.org/licenses/>. */

const officegen = require('officegen');
const fs = require('fs');
const app = require('electron').remote.app;
const dialog = require('electron').remote.dialog;
const shell = require('electron').remote.shell;

class TaggedVerseExport {
  constructor() {
    this.exportFilePath = null;
  }

  getBibleBookVerseBlocks(bibleBook, verses) {
    var lastVerseNr = 0;
    var allBlocks = [];
    var currentBlock = [];

    // Transform the list of verses into a list of verse blocks (verses that belong together)
    for (var j = 0; j < verses.length; j++) {
      var currentVerse = verses[j];

      if (currentVerse.bibleBookId == bibleBook.id) {

        if (currentVerse.absoluteVerseNr > (lastVerseNr + 1)) {
          if (currentBlock.length > 0) {
            allBlocks.push(currentBlock);
          }
          currentBlock = [];
        }
        
        currentBlock.push(currentVerse);
        lastVerseNr = currentVerse.absoluteVerseNr;
      }
    }

    allBlocks.push(currentBlock);

    return allBlocks;
  }

  renderVerseBlocks(paragraph, bibleBook, verseBlocks) {
    for (var j = 0; j < verseBlocks.length; j++) {
      var currentBlock = verseBlocks[j];

      var firstVerse = currentBlock[0];
      var lastVerse = currentBlock[currentBlock.length - 1];
      
      // Output the verse reference of this block
      paragraph.addText(bibleBook.longTitle);
      paragraph.addText(" " + firstVerse.chapter + reference_separator + firstVerse.verseNr);

      if (currentBlock.length >= 2) { // At least 2 verses, a bigger block
        var secondRef = "";

        if (lastVerse.chapter == firstVerse.chapter) {
          secondRef = "-" + lastVerse.verseNr;
        } else {
          secondRef = " - " + lastVerse.chapter + reference_separator + lastVerse.verseNr;
        }

        paragraph.addText(secondRef);
      }
      paragraph.addLineBreak();

      for (var k = 0; k < currentBlock.length; k++) {
        var currentVerse = currentBlock[k];
        var currentVerseContent = "";
        var currentVerseNodes = $(jQuery.parseHTML(currentVerse.content));
        
        for (var i = 0; i < currentVerseNodes.length; i++) {
          var currentNode = $(currentVerseNodes[i]);
          if (currentNode[0].nodeName == '#text') {
            currentVerseContent += currentNode.text();
          }
        }
      
        paragraph.addText(currentVerse.verseNr + "", { superscript: true });
        paragraph.addText(" " + currentVerseContent);
        paragraph.addLineBreak();
      }

      // Line break after block end
      paragraph.addLineBreak();
    }
  }

  renderWordDocument(bibleBooks, groupedVerseTags, verses) {
    var currentTagTitleList = bible_browser_controller.tab_controller.getCurrentTagTitleList();
    var title = "Bible verses tagged with: " + currentTagTitleList;

    var docx = officegen({
      type: 'docx',
      title: title,
      description: 'Automatically generated by Ezra Project',
      pageMargins: {
        top: 1200,
        bottom: 1200,
        left: 1000,
        right: 1000
      }
    });

    // Officegen calling this function after finishing to generate the docx document:
    docx.on('finalize', (written) => {
      shell.openItem(this.exportFilePath);
    });

    // Officegen calling this function to report errors:
    docx.on('error', function(err) {
      console.log(err)
    });
    
    var p = docx.createP();
    p.addText(title, { font_size: 14, bold: true });
    p.addLineBreak();
    p.addLineBreak();

    for (var i = 0; i < bibleBooks.length; i++) {
      var currentBook = bibleBooks[i];

      p.addText(currentBook.longTitle, { bold: true });
      p.addLineBreak();

      var allBlocks = this.getBibleBookVerseBlocks(currentBook, verses);
      this.renderVerseBlocks(p, currentBook, allBlocks);

      // Line break after book end
      p.addLineBreak();
    }

    //console.log("Generating word document " + this.saveFilePath);
    var out = fs.createWriteStream(this.exportFilePath);

    out.on('error', function(err) {
      console.log(err);
    });

    // Async call to generate the output file:
    docx.generate(out);
  }

  getPaddedNumber(number) {
    var paddedNumber = "" + number;
    if (number < 10) {
      paddedNumber = "0" + number;
    }
    return paddedNumber;
  }

  getUnixTagTitleList() {
    var currentTagTitleList = bible_browser_controller.tab_controller.getCurrentTagTitleList();
    var unixTagTitleList = currentTagTitleList.replace(/, /g, "__");
    unixTagTitleList = unixTagTitleList.replace(/ /g, "_");

    // Eliminate all special characters in the tag title list
    var specialCharacters = /[',;:\(\)\[\]{}=+\-\?\/\"><|@\*~#$%§!^°&`]/g;
    unixTagTitleList = unixTagTitleList.replace(specialCharacters, "");

    return unixTagTitleList;
  }

  getExportDialogOptions() {
    var today = new Date();
    var month = this.getPaddedNumber(today.getMonth()+1);
    var day = this.getPaddedNumber(today.getDate());
    var date = today.getFullYear() + '_' + month + '_' + day;
    var unixTagTitleList = this.getUnixTagTitleList();
    var fileName = date + '__' + unixTagTitleList + '.docx';

    var dialogOptions = {
      defaultPath: app.getPath('documents') + '/' + fileName,
      title: "Export tagged verse list to Word document",
      buttonLabel: "Run export"
    }

    return dialogOptions;
  }

  runExport() {
    var dialogOptions = this.getExportDialogOptions();
    this.exportFilePath = dialog.showSaveDialog(null, dialogOptions);
    
    if (this.exportFilePath != undefined) {
      var currentTagIdList = bible_browser_controller.tab_controller.getCurrentTagIdList();

      bible_browser_controller.communication_controller.request_verses_for_selected_tags(
        undefined,
        null,
        currentTagIdList,
        (bibleBooks, groupedVerseTags, verses) => { this.renderWordDocument(bibleBooks, groupedVerseTags, verses) },
        'docx',
        false
      );
    }
  }
}

module.exports = TaggedVerseExport;